def isPRBuild() {
  return (BRANCH_NAME ==~ /^PR-\d+$/)
}

def getPRNumber() {
  def matcher = (BRANCH_NAME =~ /^PR-(?<PR>\d+)$/)
  assert matcher.matches()
  return matcher.group('PR')
}

def getPRRef() {
    return isPRBuild() ? "refs/pull/${getPRNumber()}/${GITHUB_PR_REF_TYPE}" : "refs/heads/${BRANCH_NAME}"
}

pipeline {

  agent any

  environment {
    // The Jenkins Credentials ID (as a secret text credential) for your GitHub PAT. The PAT needs `repo` scope.
    GITHUB_CREDS = credentials('github-pat')
    // The repo default branch name
    DEFAULT_BRANCH = 'main'
    // The type of ref that will be checked out for a job initiated by a GitHub PR. 'merge' for the default PR merge commit, 'head' for the head of the branch being merged.
    GITHUB_PR_REF_TYPE = 'merge'
    PR_REF = getPRRef()
    // The name of the GitHub repository to run the analysis on
    GITHUB_REPO = 'od-ctcampbell/demo-jenkins-1'
    // See https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning#changing-the-languages-that-are-analyzed
    // for supported languages.
    // For Java and Kotlin use 'java', for JavaScript and TypeScript use 'javascript', for C and C++ use 'cpp'.
    CODEQL_LANGUAGE = 'java'
    // See https://docs.github.com/en/code-security/codeql-cli/codeql-cli-manual/database-create#--build-modemode for build mode options
    CODEQL_BUILD_MODE = 'manual'
    CODEQL_BUILD_COMMAND = './mvnw clean package -B'
    CODEQL_QUERY_SUITE = "codeql/${CODEQL_LANGUAGE}-queries:codeql-suites/${CODEQL_LANGUAGE}-security-extended.qls"
    CODEQL_BUNDLE_URL = 'https://github.com/github/codeql-action/releases/latest/download/codeql-bundle-linux64.tar.gz'
    CODEQL_DIR = './codeql'
    // The Dependency Submission Action executable archive
    // See https://github.com/advanced-security/maven-dependency-submission-action/actions/workflows/publish_executables.yml?query=branch:main for the latest version.
    // Latest at last edit: https://github.com/advanced-security/maven-dependency-submission-action/actions/runs/8876993169/artifacts/1456204717
    DEPENDENCY_SUBMISSION_EXECUTABLES_URL = 'https://api.github.com/repos/advanced-security/maven-dependency-submission-action/actions/artifacts/1456204717/zip'
    // The Dependency Submission Action executable
    // See https://github.com/advanced-security/maven-dependency-submission-action#command-line-usage for options
    DEPENDENCY_SUBMISSION_EXECUTABLE = 'maven-dependency-submission-action-linux'
  }

  stages {
    stage('Run security analysis') {
      parallel {
        stage('Run CodeQL analysis') {
          when {
            anyOf {
              branch DEFAULT_BRANCH
              expression { CHANGE_ID != null && CHANGE_AUTHOR != 'dependabot[bot]'}
            }
          }
          steps {
            script {
              sh 'rm -rf ${CODEQL_DIR} && mkdir -p ${CODEQL_DIR}'
              sh 'curl -L -sS -o codeql-bundle.tar.gz -s ${CODEQL_BUNDLE_URL}'
              sh 'tar --strip-components=1 -xzf codeql-bundle.tar.gz -C ${CODEQL_DIR}/'
              sh 'rm codeql-bundle.tar.gz'
              sh '${CODEQL_DIR}/codeql database create ./codeql-db \
                  --language ${CODEQL_LANGUAGE} \
                  --overwrite \
                  ${CODEQL_BUILD_MODE:+--build-mode} ${CODEQL_BUILD_MODE} \
                  ${CODEQL_BUILD_COMMAND:+--command} "${CODEQL_BUILD_COMMAND}"'
              sh '${CODEQL_DIR}/codeql database analyze ./codeql-db \
                  --format=sarif-latest \
                  --output=codeql-results.sarif \
                  ${CODEQL_QUERY_SUITE}'
              sh 'echo $GITHUB_CREDS | ${CODEQL_DIR}/codeql github upload-results \
                  --github-auth-stdin \
                  --sarif=codeql-results.sarif \
                  --repository=${GITHUB_REPO} \
                  --ref=${PR_REF} \
                  --commit=${GIT_COMMIT}'
            }
          }
        }
        stage('Submit dependency snapshot') {
          when {
            anyOf {
              branch DEFAULT_BRANCH
              expression { CHANGE_ID != null }
            }
          }
          steps {
            sh 'curl -L -sS \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${GITHUB_CREDS}" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                ${DEPENDENCY_SUBMISSION_EXECUTABLES_URL} \
                -o executables.zip'
            sh 'unzip executables.zip'
            sh 'chmod +x ./${DEPENDENCY_SUBMISSION_EXECUTABLE}'
            sh 'PATH=./:$PATH ./${DEPENDENCY_SUBMISSION_EXECUTABLE} \
                -r ${GITHUB_REPO} \
                -t ${GITHUB_CREDS} \
                -b ${PR_REF} \
                -s ${GIT_COMMIT}'
          }
        }
      }
    }
  }
}
